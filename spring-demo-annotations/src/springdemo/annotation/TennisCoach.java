package springdemo.annotation;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/*
 * 1st type using annotation
 * With Defined/Explicit bean id
 * given a bean id which the programmer need to define i.e., id = theSillyCoach
 * @Component("thatSillyCoach") // given bean id
 */

//@Component("thatSillyCoach") // given bean id

/*
 * 2nd type using default annotations
 * here we donot need to define bean id in @Component annotation the program will automatically define the default id
 * the default id is classname but with the first letter is small which is generated by program it self
 * here default bean id will be id = tennisCoach (because of class name)
 */
@Component //here the bean id is default that is class name i.e., TennisCoach to id = tennisCoach
public class TennisCoach implements Coach
{
	//Method - 3 Field Injection
	@Autowired
	@Qualifier("randomFortuneService")
	private FortuneService fortuneService; //this uses Java Reflection
	/*
	 * Method - 1
	 * This is a constructor injection
	@Autowired
	public TennisCoach(FortuneService theFortuneService)
	{
		fortuneService = theFortuneService;
	}
	*/
	//define a default constructor for debugging not required
	public TennisCoach() {
		System.out.println(">> TennisCoach : inside default constructor");
	}
	// define my init method
	@PostConstruct
	public void doMyStartUpStuff() {
		System.out.println(">>TennisCoach: inside of doMyStartUpStuff()");
	}
	
	// define my destroy method
	@PreDestroy
	public void doMyCleanUpStuff() {
		System.out.println(">>TennisCoach: inside of doMyCleanUpStuff()");
	}
	
	/*
	 * Method -2 
	//define a setter method or we can give any method name
	@Autowired
	public void setFortuneService(FortuneService theFortuneService) {
		System.out.println(">> TennisCoach : inside setFirtuneService() method"); // for debugging not required
		fortuneService = theFortuneService;
	}
	*/
	public String getDailyWorkout() {
		return "Practice your backhand volley";
	}

	@Override
	public String getDailyFortune() {
		return fortuneService.getFortune();
	}
}
